import json
import random
import pandas as pd
import re
from datetime import timedelta
from pathlib import Path

# === –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ ===
def load_templates_json(templates_dir, emotion):
    path = Path(templates_dir) / f"{emotion}.json"
    if not path.exists():
        raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω –¥–ª—è —ç–º–æ—Ü–∏–∏ '{emotion}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º seed –∏ –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ===
def generate_emotion_batch(n, template_data, seed=None):
    if seed is not None:
        random.seed(seed)

    subjects       = template_data["subjects"]
    verbs          = template_data["verbs"]
    contexts       = template_data["contexts"]
    interjections  = template_data.get("interjections", [""])
    templates      = template_data["templates"]

    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–≤—É–∫–æ–≤—ã–µ –º–µ—Ç–∫–∏ DIA‚ÄëTTS
    dia_tags = {
        "(laughs)", "(clears throat)", "(sighs)", "(gasps)", "(coughs)",
        "(singing)", "(sings)", "(mumbles)", "(beep)", "(groans)", "(sniffs)",
        "(claps)", "(screams)", "(inhales)", "(exhales)", "(applause)",
        "(burps)", "(humming)", "(sneezes)", "(chuckle)", "(whistles)"
    }

    def has_tag(text):      return any(tag in text for tag in dia_tags)
    def remove_tags(text):
        for tag in dia_tags:
            text = text.replace(tag, "")
        return text.strip()

    phrases, attempts = set(), 0
    max_attempts = n * 50

    while len(phrases) < n and attempts < max_attempts:
        s, v = random.choice(subjects), random.choice(verbs)
        c, i = random.choice(contexts), random.choice(interjections)
        t     = random.choice(templates)

        # ‚ñ∏ –†–∞–∑—Ä–µ—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω—É –∑–≤—É–∫–æ–≤—É—é –º–µ—Ç–∫—É –Ω–∞ —Ñ—Ä–∞–∑—É
        if has_tag(i) and has_tag(c):
            if random.random() < .5:
                c = remove_tags(c)
            else:
                i = remove_tags(i)

        phrase = t.format(s=s, v=v, c=c, i=i)

        # --- –û—á–∏—Å—Ç–∫–∞ –±–µ–∑ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–π ---------------------------
        # 1) —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        phrase = re.sub(r"\s+([,.!?])", r"\1", phrase)
        # 2) –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –¥–≤–æ–π–Ω—É—é —Ç–æ—á–∫—É, –ö–û–¢–û–†–ê–Ø –Ω–µ —á–∞—Å—Ç—å —Ç—Ä–æ–µ—Ç–æ—á–∏—è, –≤ –æ–¥–Ω—É
        phrase = re.sub(r"(?<!\.)\.\.(?!\.)", ".", phrase)
        # 3) –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –º–µ—Ç–∫–∏ —Å—Ä–∞–∑—É –∏–¥—ë—Ç —Å–ª–æ–≤–æ
        phrase = re.sub(r"\)(?=\w)", ") ", phrase)
        # 4) —Å—Ö–ª–æ–ø–Ω—É—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ–±—Ä–µ–∑–∞—Ç—å –∫—Ä–∞—è
        phrase = re.sub(r"\s{2,}", " ", phrase).strip()
        # ------------------------------------------------------------------

        if phrase not in phrases:
            phrases.add(phrase)
        attempts += 1

    if len(phrases) < n:
        print(f"‚ö†Ô∏è –¢–æ–ª—å–∫–æ {len(phrases)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ {n} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—á–µ—Ä–ø–∞–Ω –ø—É–ª —à–∞–±–ª–æ–Ω–æ–≤.")

    return list(phrases)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ ===
def generate_dummy_timestamps(n):
    base_time, result = timedelta(), []
    for idx in range(n):
        start = base_time + timedelta(seconds=idx * 6)
        end   = start + timedelta(seconds=5)
        result.append((
            str(start).split(".")[0] + ",000",
            str(end).split(".")[0]   + ",000"
        ))
    return result

# === –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV ===
def create_emotion_csv(template_path, emotion_label, out_file, n=1000, seed=None):
    data     = load_templates_json(template_path, emotion_label)
    phrases  = generate_emotion_batch(n, data, seed)
    timeline = generate_dummy_timestamps(n)

    emotions   = ["neutral", "happy", "sad", "anger", "surprise", "disgust", "fear"]
    label_mask = {e: float(e == emotion_label) for e in emotions}

    df = pd.DataFrame({
        "video_name": [f"dia_{emotion_label}_utt{i}_synt" for i in range(n)],
        "start_time": [s for s, _ in timeline],
        "end_time"  : [e for _, e in timeline],
        "sentiment" : [0] * n,
        **{e: [label_mask[e]] * n for e in emotions},
        "text"      : phrases
    })

    df.to_csv(out_file, index=False)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ ‚Üí {out_file}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ---
    dupes = df[df.duplicated("text", keep=False)]
    if not dupes.empty:
        dupe_file = Path(out_file).with_name(f"duplicates_{emotion_label}.csv")
        dupes.to_csv(dupe_file, index=False)
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(dupes)} –ø–æ–≤—Ç–æ—Ä–æ–≤ ‚Üí {dupe_file}")
    else:
        print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç.")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    emotion_config = {
        "anger":    3600,
        "disgust":  4438,
        "fear":     4441,
        "happy":    2966,
        "sad":      4026,
        "surprise": 3504
    }

    seed, template_path, out_dir = 42, "emotion_templates", "synthetic_data"
    Path(out_dir).mkdir(parents=True, exist_ok=True)

    for emotion, n in emotion_config.items():
        out_csv = Path(out_dir) / f"meld_synthetic_{emotion}_{n}.csv"
        print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {emotion}¬†({n}¬†—Ñ—Ä–∞–∑)")
        create_emotion_csv(template_path, emotion, str(out_csv), n, seed)
